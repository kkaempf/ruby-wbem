

# Class information for CIM_ManagedElement
# Generated by 'wbem' for use with ruby-wbem

require 'rubygems'
require 'cim'
require 'wbem'

module Wbem

  class CIM_ManagedElement < Wbem::Instance


    TYPEMAP = {

        # CIM_ManagedElement.InstanceID
        "InstanceID" => :string,

        # CIM_ManagedElement.Caption
        "Caption" => :string,

        # CIM_ManagedElement.Description
        "Description" => :string,

        # CIM_ManagedElement.ElementName
        "ElementName" => :string,

        # CIM_ManagedElement.Generation
        "Generation" => :uint64,

    }
    

    #
    # Class constructor
    #   client - client instance, used for method invocation
    #            either a Wbem::CimxmlClient
    #            or a Wbem::WsmanClient
    #
    #   instance_ref - instance reference
    #                  either ObjectPath (Wbem::CimxmlClient) or
    #                  EndPointReference (Wbem::WsmanClient)
    #
    #   instance_data - instance data
    #                   Wbem::WsmanClient: Openwsman::XmlNode
    #                   Wbem::CimxmlClient: nil (instance_ref has all information)
    #
    def initialize client, instance_ref, instance_data = nil
      super
    end
    def method_missing name, *args
      # http://stackoverflow.com/questions/8960685/ruby-why-does-puts-call-to-ary
      raise NoMethodError if name == :to_ary
      assign = false
      if name[-1,1] == '=' # assignment
        name = name[0...-1]
        assign = true
      end
      type = TYPEMAP[name.to_s]
      if type.is_a? Array
        STDERR.puts "\#{self.class}.invoke(\#{name})(\#{args.inspect})"
        STDERR.puts "Respond? \#{self.respond_to?('invoke')}"
        invoke(name.to_s, method, args)
      else
        return nil unless type # unknown property
        if assign
          # property assignment
          self[name] = Wbem::Conversion.from_ruby type, args[0]
        else
          # property read
          value = self[name]
          Wbem::Conversion.to_ruby type, value
        end
      end
    end # method_missing
  end # class
end # module
