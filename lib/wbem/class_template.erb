<%
  # @classes[name] = { :path => mofpath, :mof => mofclass }

  def collect_superclasses name
    classdata = @classmap[name]
    raise "No such class: #{name}" unless classdata
    mofclass = classdata[:mof]
    superclass = mofclass.superclass
    [mofclass] + ((superclass)?collect_superclasses(superclass):[])
  end
%>

# Class information for <%= name %>
# Generated by 'wbem' for use with ruby-wbem

require 'rubygems'
require 'cim'
require 'wbem'

module Wbem

  class <%= name %> < Wbem::Instance
<% classes = collect_superclasses name %>
<% known_features = Hash.new %>
    TYPEMAP = {
<%    classes.each do |mofclass|
        mofclass.features.each do |f|
          next if known_features[f.name]
          known_features[f.name] = f
          if f.method? %>
        # <%= mofclass.name %>.<%= f.name %>()
        <%= f.name.inspect %> => [ <%= f.type.to_sym.inspect %>, <% f.parameters.each do |p| %>
            [ <%= p.name.inspect %>, <%= p.type.to_sym.inspect %>, <%= (p.includes?(:out))?":out":":in" %> ], <% end %>
          ],
        <% else %>
        # <%= mofclass.name %>.<%= f.name %>
        <%= f.name.inspect %> => <%= f.type.to_sym.inspect %>,
<%        end
        end
      end %>
    }
    
    def _typemap
      TYPEMAP
    end

  end # class
end # module
